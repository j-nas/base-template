import type { InferGetStaticPropsType, NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import dynamic from "next/dynamic";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import Logo from "../components/Logo";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { createInnerTRPCContext } from "../server/api/trpc";
import { appRouter } from "../server/api/root";
import { cloudinaryUrlGenerator } from "../utils/cloudinaryApi";
import CldImg from "../components/CldImg";

const DynamicGallery = dynamic(() => import("../components/FrontGallery"), {
  loading: () => <p>Loading...</p>,
});

const DynamicTestimonial = dynamic(() => import("../components/Testimonial"), {
  loading: () => <p>Loading...</p>,
});

const DynamicSocials = dynamic(() => import("../components/Socials"), {
  loading: () => <p>Loading...</p>,
});
const DynamicNavbar = dynamic(() => import("../components/Navbar"), {
  loading: () => null,
});

const Home: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = (
  props
) => {
  const [scrollPosition, setScrollPosition] = useState(0);

  useEffect(() => {
    window.addEventListener(
      "scroll",
      () => {
        setScrollPosition(window.scrollY);
      },
      { passive: true }
    );

    return () => {
      window.removeEventListener("scroll", () => {
        setScrollPosition(window.scrollY);
      });
    };
  }, []);

  const {
    business,
    frontHero,
    frontHeroImageUrl,
    aboutUs,
    bottomHero,
    bottomHeroImageUrl,
    services,
    testimonials,
    mainService,
    pageTitle,
    gallery,
  } = props;

  return (
    <>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto h-full">
        <DynamicNavbar
          scrollPosition={scrollPosition}
          business={business}
          services={services}
        />

        {/* Hero Section */}
        <section className="">
          <div
            className="clip-path hero relative min-h-[130vh]  lg:bg-fixed"
            style={{
              backgroundImage: `url(${frontHeroImageUrl})`,
            }}
          >
            <div className="hero-overlay relative z-10 bg-black bg-opacity-60 "></div>
            <div className="hero-content z-20 text-center text-white ">
              <div className="max-w-md">
                <h1 className="mb-5 -mt-32 font-semibold uppercase text-primary">
                  {business?.title}
                </h1>
                <h2 className="mb-5 text-5xl font-bold md:text-7xl">
                  {frontHero?.heading}
                </h2>
                <p className="mb-5 text-xl">{frontHero?.ctaText}</p>
                <button className="btn-primary btn rounded-none">
                  Get Started
                </button>
              </div>
            </div>
          </div>
        </section>

        {/* Services summary Section */}
        <section className=" mx-auto flex w-10/12 justify-center lg:w-5/6">
          <div className="z-30 -mt-32 grid w-fit justify-center gap-0 rounded-t-md border-t-8 border-primary shadow-lg lg:w-11/12 lg:grid-cols-3">
            {services.slice(0, 3).map((service) => (
              <div className="card rounded-none bg-base-300 " key={service.id}>
                <div className="card-body">
                  <div className="mb-8 h-auto w-fit place-self-center rounded-full bg-primary py-4 px-4 text-center">
                    <Image
                      src="https://icons.getbootstrap.com/assets/icons/1-circle.svg"
                      width={24}
                      height={24}
                      alt="icon"
                    />
                  </div>
                  <h2 className=" text-center text-xl font-medium">
                    {service.title}
                  </h2>
                  <p className="text-center">{service.shortDescription}</p>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* About us summary */}
        <section className="container mx-auto mt-32 grid w-11/12 gap-12 lg:grid-cols-2">
          {/* image with inset image */}
          <div className="relative  mr-2 grid h-full grid-cols-12 ">
            {aboutUs && (
              <>
                <div className="col-span-10 col-start-1 row-start-1 h-full ">
                  <CldImg
                    alt="About us"
                    format={aboutUs.PrimaryImage.format}
                    height={600}
                    width={800}
                    public_Id={aboutUs.PrimaryImage.public_Id}
                    id={aboutUs.PrimaryImage.id}
                    blur={aboutUs.PrimaryImage.blur_url}
                    className="rounded-lg border-4 border-secondary shadow-2xl  md:border-[12px]"
                  />
                </div>
                <div className="col-start-3 col-end-13 row-start-1 pt-20 md:pt-40 lg:pt-48">
                  <CldImg
                    alt="About us"
                    format={aboutUs.SecondaryImage.format}
                    height={600}
                    width={800}
                    public_Id={aboutUs.SecondaryImage.public_Id}
                    id={aboutUs.SecondaryImage.id}
                    blur={aboutUs.SecondaryImage.blur_url}
                    className="rounded-lg border-4 border-secondary shadow-2xl md:border-[12px]"
                  />
                </div>
              </>
            )}
          </div>
          {/* text */}
          <div className="prose flex flex-col justify-center">
            <span className="font-medium uppercase text-accent">About Us</span>
            <h2 className="mt-0 text-4xl font-bold">About {business?.title}</h2>
            {aboutUs?.markdown
              .split("\n")
              .slice(0, 2)
              .map((paragraph) => (
                <p key={paragraph} className="mb-4 text-lg">
                  {paragraph}
                </p>
              ))}
            <blockquote className="mx-auto rounded-xl bg-base-300  bg-[url(/quote-white.svg)] bg-[right_135%] bg-no-repeat p-4">
              <p className="mb-4 text-lg">{business?.ownerQuote}</p>
              <span className="font-medium uppercase text-accent">
                {business?.ownerName}
              </span>
              <span className={`text-base`}> - {business?.ownerTitle}</span>
            </blockquote>
            <button className="btn-primary btn w-fit">More about us</button>
          </div>
        </section>

        {/* Middle Hero Section */}
        <section className=" mx-auto mt-32 grid w-11/12 place-items-stretch lg:grid-cols-2 ">
          {/* text */}
          <div className="prose order-last flex flex-col justify-center lg:order-first ">
            <span className="mt-12 font-medium uppercase text-accent">
              {mainService?.shortDescription}
            </span>
            <h2 className="mt-0 text-4xl font-bold">{mainService?.title}</h2>
            {mainService?.markdown
              .split("\n")
              .slice(0, 2)
              .map((paragraph) => (
                <p key={paragraph} className="mb-4 text-lg">
                  {paragraph}
                </p>
              ))}

            <button className="btn-primary btn w-fit">
              More about {mainService?.title}
            </button>
          </div>
          {/* image with inset image */}
          <div className="relative grid grid-cols-12   ">
            {mainService && (
              <>
                <div className="col-span-10 col-start-3 row-start-1 ">
                  <CldImg
                    alt={mainService.title}
                    format={mainService.PrimaryImage.format}
                    height={600}
                    width={800}
                    public_Id={mainService.PrimaryImage.public_Id}
                    id={mainService.PrimaryImage.id}
                    blur={mainService.PrimaryImage.blur_url}
                    className=" rounded-lg border-4 border-secondary  shadow-2xl md:border-[12px]"
                  />
                </div>
                <div className="col-start-1 col-end-11 row-start-1 pt-24 md:pt-48">
                  <CldImg
                    alt={mainService.title}
                    format={mainService.SecondaryImage.format}
                    height={600}
                    blur={mainService.SecondaryImage.blur_url}
                    width={800}
                    public_Id={mainService.SecondaryImage.public_Id}
                    id={mainService.SecondaryImage.id}
                    className=" rounded-lg border-4 border-secondary shadow-2xl md:border-[12px]"
                  />
                </div>
              </>
            )}
          </div>
        </section>

        {/* short photo gallery */}
        <section className="container my-2 mt-32 flex flex-col items-center text-center">
          <span className="font-medium uppercase text-accent">
            Our Portfolio{" "}
          </span>
          <h2 className="mx-1 mt-2 mb-6 break-words text-3xl font-bold md:text-5xl">
            {
              services?.find((service) => service.position === "SERVICE1")
                ?.title
            }
            , , and more...
          </h2>
          {/* <DynamicGallery
            layout="masonry"
            photos={gallery.map((photo) => {
              return {
                src: `https://res.cloudinary.com/${env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload/${env.NEXT_PUBLIC_CLOUDINARY_FOLDER}/${photo.public_Id}.${photo.format}`,
                width: photo.width,
                height: photo.height,
                alt: photo.altText,
                key: photo.public_Id,
              };
            })}
            renderPhoto={({ photo }) => (
              <div className="relative block h-full w-full">
                <Image
                  fill
                  src={photo.src}
                  alt={photo.alt || ""}
                  className=""
                  placeholder="blur"
                  blurDataURL={
                    gallery.find((image) => image.id === photo.key)?.blur_url ||
                    ""
                  }
                />
              </div>
            )}

          /> */}
          <DynamicGallery gallery={gallery} />
          <button className="btn-primary btn mt-8">View full gallery </button>
        </section>

        {/* Testimonials Section */}
        <section className="mx-2 mt-32 flex flex-col items-center text-center">
          <span className="font-medium uppercase text-accent">
            Our Reviews{" "}
          </span>
          <h2 className="mt-2 text-5xl font-bold">What our clients say</h2>
          <p className="mx-2 mt-2 max-w-xl">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Hic qui
            iure illo! Expedita consequuntur obcaecati omnis ipsum quis
            deleniti? Temporibus!
          </p>
          {/* div with 2 cards in a grid */}
          <div className="mt-12 mb-6 grid grid-cols-1 justify-evenly gap-12 lg:grid-cols-2 lg:p-24">
            {testimonials?.slice(0, 2).map((testimonial) => (
              <DynamicTestimonial
                testimonial={testimonial}
                key={testimonial.id}
              />
            ))}
          </div>
          <button className="btn-primary btn">More reviews</button>
        </section>

        {/* Bottom Hero Section */}
        <section className="mx-0 mt-32 md:mx-14 ">
          <div
            className="hero relative min-h-[80vh] "
            style={{
              backgroundImage: `url(${bottomHeroImageUrl})`,
            }}
          >
            <div className="hero-overlay bg-black bg-opacity-50"></div>
            <div className="hero-content text-center  ">
              <div className="max-w-md text-white">
                <span className="text-medium uppercase text-accent">
                  {business?.title}
                </span>
                <h2 className="mb-5 text-5xl font-bold  md:text-7xl">
                  {bottomHero?.heading}
                </h2>
                <p className="inline-flix mb-5 flex text-xl">
                  {bottomHero?.ctaText}
                </p>
                <button className="btn-primary btn rounded-none">
                  Get Started
                </button>
              </div>
            </div>
          </div>
        </section>

        {/* Footer */}
        <>
          <footer className="footer bg-base-200 p-10 text-base-content ">
            <nav>
              <span className="footer-title">Company</span>
              <Link href="/" as="/#top">
                Home
              </Link>
              <Link href="/about/" as="/about/#top" className="link-hover link">
                About us
              </Link>
              <Link
                href="/services/"
                as="/services/#top"
                className="link-hover link"
              >
                Services
              </Link>
              <Link
                href="/contact/"
                as="/contact/#top"
                className="link-hover link"
              >
                Contact
              </Link>

              <Link
                href="/gallery/"
                as="/gallery/#top"
                className="link-hover link"
              >
                Gallery
              </Link>
            </nav>
            <div>
              <span className="footer-title text-base-content">Services</span>
              {services?.map((service) => (
                <Link
                  key={service.id}
                  href={`/services/${service.pageName}`}
                  className="link-hover link"
                >
                  {service.title}
                </Link>
              ))}
            </div>
            <div className="prose">
              <h3>About us</h3>
              <p className="">{aboutUs?.summary.slice(0, 300)}</p>
            </div>
            <div>
              <div className="flex flex-col pb-2">
                <span className="">{business?.address}</span>
                <span>
                  {business?.city}
                  {", "}
                  {business?.province}
                </span>
                <span>{business?.postalCode}</span>
                <span className="">
                  <Link className="link" href={`tel:${business.telephone}`}>
                    {business.telephone}
                  </Link>
                </span>
              </div>
            </div>
          </footer>

          <footer className="footer border-t border-base-300 bg-base-200 px-10 py-4 text-base-content">
            <div className=" flex grid-flow-col flex-col items-baseline ">
              <Logo className="z-50 h-auto w-[160px] fill-base-content" />
              <p className="mx-auto">Copyright © {new Date().getFullYear()}</p>
            </div>
            <div className="pr-4 md:place-self-center md:justify-self-end">
              <DynamicSocials {...business} />
            </div>
          </footer>
          <footer className="footer flex w-full justify-center border-t border-base-300 bg-base-200 py-2 px-2  text-center text-base-content ">
            <p className="inline-block w-1/2 text-xs">
              Designed and hosted by{" "}
              <a className="link" href="https://www.shorecel.com">
                Shorecel Web Services
              </a>
            </p>
          </footer>
        </>
      </main>
    </>
  );
};

export default Home;

export async function getStaticProps() {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: createInnerTRPCContext({ session: null }),
  });

  const business = await ssg.businessInfo.getActive.fetch();
  const services = await ssg.service.getActive.fetch();
  const frontHero = await ssg.hero.getFront.fetch();
  const bottomHero = await ssg.hero.getBottom.fetch();
  const testimonials = await ssg.testimonial.getFirstTwoHighlighted.fetch();
  const aboutUs = await ssg.aboutUs.getCurrent.fetch();
  const gallery = await ssg.gallery.getFrontPageGallery.fetch();

  const frontHeroImageUrl = cloudinaryUrlGenerator(
    frontHero?.PrimaryImage[0]?.image?.public_Id,
    frontHero?.PrimaryImage[0]?.image?.format
  );
  const bottomHeroImageUrl = cloudinaryUrlGenerator(
    bottomHero?.PrimaryImage[0]?.image?.public_Id,
    bottomHero?.PrimaryImage[0]?.image?.format
  );

  const mainService = services.find(
    (service) => service.position === "SERVICE1"
  );

  const pageTitle = !mainService
    ? "Home"
    : business.title +
      " | " +
      mainService.title +
      " | " +
      business.city +
      ", " +
      business.province;

  return {
    props: {
      business,
      services,
      frontHero,
      bottomHero,
      testimonials,
      aboutUs,
      frontHeroImageUrl,
      bottomHeroImageUrl,
      mainService,
      pageTitle,
      gallery,
    },
  };
}
