import type { InferGetStaticPropsType, NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";

import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { createInnerTRPCContext } from "../server/api/trpc";
import { appRouter } from "../server/api/root";
import { api } from "../utils/api";
import superjson from "superjson";

const Home: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = (
  props
) => {
  const {} = props;
  if (!props.trpcState) return null;
  const { data: business } = api.businessInfo.getActive.useQuery();
  const { data: topHero } = api.hero.getTop.useQuery();
  const { data: services } = api.service.getActive.useQuery();
  if (topHero?.image) console.log(topHero?.image);
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main data-theme="dracula">
        {/* Navbar */}

        <nav className="navbar absolute bg-transparent">
          <div className="navbar-start">
            <button className="btn-ghost btn text-xl lowercase">
              {business?.title}
            </button>
          </div>
          <div className="navbar-end">
            {/* {services
              ?.filter((service?) => service.position)
              .map((service) => (
                <Link href={``} key={service.id}>
                  <button className="btn-ghost btn ">{service.title}</button>
                </Link>
              ))} */}
          </div>
        </nav>

        {/* Hero Section */}

        <section className="flex w-full flex-col justify-center">
          <div
            className="hero min-h-[130vh] bg-fixed"
            style={{
              backgroundImage: `url(${topHero ? topHero.image : ""})`,
            }}
          >
            <div className="hero-overlay bg-base-300 bg-opacity-80"></div>
            <div className="hero-content text-center ">
              <div className="max-w-md">
                <p className="mb-5 -mt-32 font-semibold uppercase text-primary">
                  {topHero?.subtitle}
                </p>
                <h1 className="mb-5 text-5xl font-bold">{topHero?.title}</h1>
                <p className="mb-5">{topHero?.description}</p>
                <button className="btn-primary btn">Get Started</button>
              </div>
            </div>
          </div>
        </section>

        {/* Services summary Section */}
        <section className="">
          <div className="relative inset-x-0 top-0 -mt-32 grid w-fit justify-center gap-0 rounded-t-md border-t-8 border-primary lg:w-11/12 lg:grid-cols-3">
            {services?.map((service) => (
              <div
                className="card rounded-none bg-base-300 shadow-lg"
                key={service.id}
              >
                <div className="card-body">
                  <div className="mb-12 h-fit w-fit place-self-center rounded-full bg-primary p-8">
                    <Image
                      src={service.icon}
                      height={40}
                      width={40}
                      alt={service.title}
                    />
                  </div>
                  <h2 className="card-title">{service.title}</h2>
                  <p className="card-subtitle">{service.shortDescription}</p>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* About us summary */}

        {/* Middle Hero Section */}

        {/* short photo gallery */}

        {/* Testimonials Section */}

        {/* Bottom Hero Section */}

        {/* Footer */}
      </main>
    </>
  );
};

export default Home;

export async function getStaticProps() {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: createInnerTRPCContext({ session: null }),
    transformer: superjson,
  });

  const business = await ssg.businessInfo.getActive.fetch();
  const services = await ssg.service.getActive.fetch();
  const topHero = await ssg.hero.getTop.fetch();
  const middleHero = await ssg.middleHero.getCurrent.fetch();
  const bottomHero = await ssg.hero.getBottom.fetch();
  const testimonials = await ssg.testimonial.getFirstTwoHighlighted.fetch();
  const aboutUs = await ssg.aboutUs.getCurrent.fetch();

  return {
    props: {
      trpcState: ssg.dehydrate(),
      business,
      services,
      topHero,
      middleHero,
      bottomHero,
      testimonials,
      aboutUs,
    },
  };
}
