import type { InferGetStaticPropsType, NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import React, { useState } from "react";

import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { createInnerTRPCContext } from "../server/api/trpc";
import { appRouter } from "../server/api/root";
import { api } from "../utils/api";
import superjson from "superjson";

const Home: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = (
  props
) => {
  const [theme, setTheme] = useState("dracula");
  const themes = [
    "light",
    "dark",
    "cupcake",
    "bumblebee",
    "emerald",
    "corporate",
    "synthwave",
    "retro",
    "cyberpunk",
    "valentine",
    "halloween",
    "garden",
    "forest",
    "aqua",
    "lofi",
    "pastel",
    "fantasy",
    "wireframe",
    "black",
    "luxury",
    "dracula",
    "cmyk",
    "autumn",
    "business",
    "acid",
    "lemonade",
    "night",
    "coffee",
    "winter",
  ];

  const handleThemeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setTheme(event.currentTarget.value);
  };

  const {} = props;
  const { data: business } = api.businessInfo.getActive.useQuery();
  const { data: topHero } = api.hero.getTop.useQuery();
  const { data: services } = api.service.getActive.useQuery();
  const { data: aboutUs } = api.aboutUs.getCurrent.useQuery();
  const { data: middleHero } = api.middleHero.getCurrent.useQuery();

  const mainService = services?.find(
    (service) => service.position === "SERVICE1"
  );

  return (
    <>
      <Head>
        <title>
          {business?.title}
          {" | "}
          {services?.find((service) => service.position === "SERVICE1")?.title}
          {" | "}
          {business?.addressSecondLine}
        </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main data-theme={theme} className=" h-full pb-24">
        {/* Navbar */}
        <nav className="navbar fixed z-50 bg-transparent">
          <div className="navbar-start">
            <button className="btn-ghost btn text-xl lowercase">
              {business?.title}
            </button>
          </div>
          <div className="navbar-center sm:justify-end">
            <select
              className="form-select"
              value={theme}
              onChange={handleThemeChange}
            >
              {themes.map((theme) => (
                <option key={theme} value={theme}>
                  {theme}
                </option>
              ))}
            </select>
          </div>
          <div className="navbar-end hidden lg:flex">
            {services
              ?.filter((service?) => service.position)
              .map((service) => (
                <Link href={``} key={service.id}>
                  <button className="btn-ghost btn ">{service.title}</button>
                </Link>
              ))}
          </div>
        </nav>

        {/* Hero Section */}
        <section className="">
          <div
            className="hero min-h-[130vh] lg:bg-fixed"
            style={{
              backgroundImage: `url(${topHero ? topHero.image : ""})`,
            }}
          >
            <div className="hero-overlay bg-opacity-50 bg-gradient-to-b  from-transparent to-base-100"></div>
            <div className="hero-content text-center  ">
              <div className="max-w-md">
                <h1 className="mb-5 -mt-32 font-semibold uppercase text-primary">
                  {topHero?.subtitle}
                </h1>
                <h2 className="mb-5 text-5xl font-bold md:text-7xl">
                  {topHero?.title}
                </h2>
                <p className="mb-5 text-xl">{topHero?.description}</p>
                <button className="btn-primary btn rounded-none">
                  Get Started
                </button>
              </div>
            </div>
          </div>
        </section>

        {/* Services summary Section */}
        <section className="mx-2 flex justify-center">
          <div className="-mt-32 grid w-fit justify-center gap-0 rounded-t-md border-t-8 border-primary shadow-lg lg:w-11/12 lg:grid-cols-3">
            {services?.map((service) => (
              <div className="card rounded-none bg-base-300 " key={service.id}>
                <div className="card-body">
                  <div className="mb-8 h-fit w-fit place-self-center rounded-full bg-primary p-8 text-center">
                    <Image
                      src={service.icon}
                      height={40}
                      width={40}
                      alt={service.title}
                    />
                  </div>
                  <h2 className=" text-center text-xl font-medium">
                    {service.title}
                  </h2>
                  <p className="text-center">{service.shortDescription}</p>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* About us summary */}
        <section className=" mx-4 mt-32 grid w-11/12 place-items-center gap-12 lg:grid-cols-2">
          {/* image with inset image */}
          <div className="relative grid grid-cols-12 ">
            {aboutUs && (
              <>
                <div className="col-span-10 col-start-1 row-start-1 ">
                  <Image
                    src={aboutUs?.imageUrl}
                    height={1600}
                    width={2400}
                    className="rounded-xl border-8 border-secondary"
                    alt={aboutUs?.title}
                  />
                </div>
                <div className="col-start-5 col-end-13 row-start-1 pt-32">
                  <Image
                    src={aboutUs?.imageUrl}
                    height={1600}
                    width={2400}
                    className="rounded-xl border-8 border-secondary"
                    alt={aboutUs?.title}
                  />
                </div>
              </>
            )}
          </div>
          {/* text */}
          <div className="prose flex flex-col justify-center">
            <span className="font-medium uppercase text-accent">About Us</span>
            <h2 className="mt-0 text-4xl font-bold">About {business?.title}</h2>
            {aboutUs?.markdown
              .split("\n")
              .slice(0, 2)
              .map((paragraph) => (
                <p key={paragraph} className="mb-4 text-lg">
                  {paragraph}
                </p>
              ))}
            <blockquote className="rounded-xl bg-base-300 bg-[url(/quote-white.svg)] bg-right-bottom bg-no-repeat p-4">
              <p className="mb-4 text-lg">{business?.ownerQuote}</p>
              <span className="font-medium uppercase text-accent">
                {business?.ownerName}
              </span>
              <span className={`text-base`}> - {business?.ownerTitle}</span>
            </blockquote>
            <button className="btn-primary btn w-fit">More about us</button>
          </div>
        </section>

        {/* Middle Hero Section */}
        <section className=" mx-4 mt-32 grid w-11/12 justify-items-center gap-12 lg:grid-cols-2">
          {/* text */}
          <div className="prose flex flex-col justify-center">
            <span className="font-medium uppercase text-accent">
              {mainService?.shortDescription}
            </span>
            <h2 className="mt-0 text-4xl font-bold">{mainService?.title}</h2>
            {mainService?.markdown
              .split("\n")
              .slice(0, 2)
              .map((paragraph) => (
                <p key={paragraph} className="mb-4 text-lg">
                  {paragraph}
                </p>
              ))}

            <button className="btn-primary btn w-fit">
              More about {mainService?.title}
            </button>
          </div>
          {/* image with inset image */}
          <div className="relative grid grid-cols-12 ">
            {mainService && (
              <>
                <div className="col-span-10 col-start-3 row-start-1 ">
                  <Image
                    src={mainService?.imageUrl}
                    height={1600}
                    width={2400}
                    className="rounded-xl border-8 border-secondary"
                    alt={mainService?.title}
                  />
                </div>
                <div className="col-start-1 col-end-9 row-start-1 pt-32">
                  <Image
                    src={mainService.imageUrl}
                    height={1600}
                    width={2400}
                    className="rounded-xl border-8 border-secondary"
                    alt={mainService?.title}
                  />
                </div>
              </>
            )}
          </div>
        </section>

        {/* short photo gallery */}

        {/* Testimonials Section */}

        {/* Bottom Hero Section */}
        <section className="mx-0 mt-32 md:mx-14 ">
          <div
            className="hero min-h-[80vh] "
            style={{
              backgroundImage: `url(${topHero ? topHero.image : ""})`,
            }}
          >
            <div className="hero-overlay bg-base-100 bg-opacity-50"></div>
            <div className="hero-content text-center  ">
              <div className="max-w-md">
                <h2 className="mb-5 text-5xl font-bold md:text-7xl">
                  {topHero?.title}
                </h2>
                <p className="mb-5 text-xl">{topHero?.description}</p>
                <button className="btn-primary btn rounded-none">
                  Get Started
                </button>
              </div>
            </div>
          </div>
        </section>

        {/* Footer */}
      </main>
    </>
  );
};

export default Home;

export async function getStaticProps() {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: createInnerTRPCContext({ session: null }),
    transformer: superjson,
  });

  const business = await ssg.businessInfo.getActive.fetch();
  const services = await ssg.service.getActive.fetch();
  const topHero = await ssg.hero.getTop.fetch();
  const middleHero = await ssg.middleHero.getCurrent.fetch();
  const bottomHero = await ssg.hero.getBottom.fetch();
  const testimonials = await ssg.testimonial.getFirstTwoHighlighted.fetch();
  const aboutUs = await ssg.aboutUs.getCurrent.fetch();

  return {
    props: {
      trpcState: ssg.dehydrate(),
      business,
      services,
      topHero,
      middleHero,
      bottomHero,
      testimonials,
      aboutUs,
    },
  };
}
