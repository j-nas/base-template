// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String
    email         String       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    admin         Boolean      @default(false)
    superAdmin    Boolean      @default(false)
    Blog          Blog[]
    avatarImage   AvatarImage?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model BusinessInfo {
    id           String        @id @default(cuid())
    title        String
    address      String
    city         String
    province     String
    postalCode   String
    telephone    String
    email        String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    isActive     Boolean       @default(false)
    ownerName    String
    ownerTitle   String
    ownerQuote   String
    hours        String
    holidays     String
    avatarImage  AvatarImage?
    businessLogo BusinessLogo?
    facebookUrl  String?
    twitterUrl   String?
    instagramUrl String?
    linkedInUrl  String?
    youtubeUrl   String?
    pinterestUrl String?
    tiktokUrl    String?
    snapchatUrl  String?
    whatsappUrl  String?
}

model Hero {
    id           String        @id @default(cuid())
    heading      String
    ctaText      String
    createdAt    DateTime      @default(now())
    position     HeroPosition? @unique
    primaryImage PrimaryImage?
}

model Service {
    id               String          @id @default(cuid())
    pageName         String          @unique
    title            String
    shortDescription String
    markdown         String
    icon             String
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    position         Services?       @unique
    primaryImage     PrimaryImage?
    secondaryImage   SecondaryImage?
}

model AboutUs {
    id             String          @id @default(cuid())
    title          String
    summary        String
    markdown       String
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    inUse          Boolean         @default(false)
    primaryImage   PrimaryImage?
    secondaryImage SecondaryImage?
}

model Testimonial {
    id          String       @id @default(cuid())
    name        String
    title       String
    company     String
    quote       String
    createdAt   DateTime     @default(now())
    highlighted Boolean      @default(false)
    avatarImage AvatarImage?
}

model Blog {
    id           String        @id @default(cuid())
    title        String        @unique
    summary      String
    markdown     String
    featured     Boolean       @default(false)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    author       User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId       String?
    primaryImage PrimaryImage?
}

model Image {
    id              String            @id
    public_id       String            @unique
    format          String
    width           Int
    height          Int
    bytes           Int
    secure_url      String
    type            String
    blur_url        String
    createdAt       DateTime          @default(now())
    primaryImage    PrimaryImage[]
    secondaryImage  SecondaryImage[]
    imageForGallery ImageForGallery[]
    avatarImage     AvatarImage[]
    businessLogo    BusinessLogo[]
}

model ImageForGallery {
    image     Image   @relation(fields: [imageId], references: [id])
    imageId   String
    gallery   Gallery @relation(fields: [galleryId], references: [id])
    galleryId String
    altText   String

    @@id([imageId, galleryId])
}

model Gallery {
    id       String           @id @default(cuid())
    name     String
    position GalleryPosition? @unique

    createdAt       DateTime          @default(now())
    imageForGallery ImageForGallery[]
}

model PrimaryImage {
    id        String   @id @default(cuid())
    image     Image    @relation(fields: [imageId], references: [id])
    imageId   String
    hero      Hero?    @relation(fields: [heroId], references: [id])
    heroId    String?  @unique
    service   Service? @relation(fields: [serviceId], references: [id])
    serviceId String?  @unique
    aboutUs   AboutUs? @relation(fields: [aboutUsId], references: [id])
    aboutUsId String?  @unique
    blog      Blog?    @relation(fields: [blogId], references: [id])
    blogId    String?  @unique
}

model SecondaryImage {
    id        String   @id @default(cuid())
    image     Image    @relation(fields: [imageId], references: [id])
    imageId   String
    aboutUs   AboutUs? @relation(fields: [aboutUsId], references: [id])
    aboutUsId String?  @unique
    service   Service? @relation(fields: [serviceId], references: [id])
    serviceId String?  @unique
}

model AvatarImage {
    id             String        @id @default(cuid())
    image          Image         @relation(fields: [imageId], references: [id])
    imageId        String
    businessInfo   BusinessInfo? @relation(fields: [businessInfoId], references: [id])
    businessInfoId String?       @unique
    testimonial    Testimonial?  @relation(fields: [testimonialId], references: [id])
    testimonialId  String?       @unique
    user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId         String?       @unique
}

model BusinessLogo {
    image          Image        @relation(fields: [imageId], references: [id])
    imageId        String
    businessInfo   BusinessInfo @relation(fields: [businessInfoId], references: [id])
    businessInfoId String       @unique

    @@id([imageId, businessInfoId])
}

enum Services {
    SERVICE1
    SERVICE2
    SERVICE3
    SERVICE4
    SERVICE5
}

enum HeroPosition {
    TOP
    BOTTOM
    FRONT
}

enum GalleryPosition {
    FRONT
    MAIN
}
